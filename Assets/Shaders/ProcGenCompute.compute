#pragma kernel cs_main
#pragma kernel cs_smooth

RWBuffer<int> result;
float width;
float height;
float wall_cutoff;
int neighbor_cutoff;

inline float rand(const float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

inline float interpolate(const float a, const float b, const float t)
{
    return (1.0 - t) * a + (t * b);
}

inline float value_noise(float2 uv)
{
    const float2 i = floor(uv);
    float2 f = frac(uv);
    f = f * f * (3.0 - 2.0 * f);

    uv = abs(frac(uv) - 0.5);
    const float2 c0 = i + float2(0.0, 0.0);
    const float2 c1 = i + float2(1.0, 0.0);
    const float2 c2 = i + float2(0.0, 1.0);
    const float2 c3 = i + float2(1.0, 1.0);
    const float r0 = rand(c0);
    const float r1 = rand(c1);
    const float r2 = rand(c2);
    const float r3 = rand(c3);

    const float bottom_of_grid = interpolate(r0, r1, f.x);
    const float top_of_grid = interpolate(r2, r3, f.x);
    float t = interpolate(bottom_of_grid, top_of_grid, f.y);
    return t;
}

float simple_noise(float2 uv, const float scale)
{
    float t = 0.0;

    float freq = pow(2.0, float(0));
    float amp = pow(0.5, float(3 - 0));
    t += value_noise(float2(uv.x * scale / freq, uv.y * scale / freq)) * amp;

    freq = pow(2.0, float(1));
    amp = pow(0.5, float(3 - 1));
    t += value_noise(float2(uv.x * scale / freq, uv.y * scale / freq)) * amp;

    freq = pow(2.0, float(2));
    amp = pow(0.5, float(3 - 2));
    t += value_noise(float2(uv.x * scale / freq, uv.y * scale / freq)) * amp;

    return t;
}

int index(const int x, const int y)
{
    return x + y * width;
}

int get_neighbor_count(const int grid_x, const int grid_y)
{
    int wall_count = 0;

    for (int x = grid_x - 1; x <= grid_x + 1; ++x) {
        for (int y = grid_y - 1; y <= grid_y + 1; ++y) {
            if (x >= 0 && x < width && y >= 0 && y < height) {
                if (x != grid_x || y != grid_y)
                    wall_count += result[index(x, y)];
            }
            else {
                wall_count++;
            }
        }
    }

    return wall_count;
}

[numthreads(8, 8, 1)]
void cs_smooth(uint3 id : SV_DispatchThreadID)
{
    const int neighbor_count = get_neighbor_count(id.x, id.y);

    if (neighbor_count > neighbor_cutoff)
        result[index(id.x, id.y)] = 1;
    else if (neighbor_count < neighbor_cutoff)
        result[index(id.x, id.y)] = 0;
}

[numthreads(8, 8, 1)]
void cs_main(uint3 id : SV_DispatchThreadID)
{
    const float n = simple_noise(id.xy, 1.0);

    if (id.x == 0 || id.x == width - 1 || id.y == 0 || id.y == height - 1)
        result[index(id.x, id.y)] = 1;
    else
        result[index(id.x, id.y)] = n < wall_cutoff ? 0 : 1;
}
